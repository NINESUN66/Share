## 两种数组去重方式

### 方法一：

##### 头文件
#include<vector>
#include<algorithm>
##### 具体实现
vector<int> all;
sort(all.begin(),all.end());
all.erase(unique(all.begin(),all.end()),all.end());

### 方法二：

##### 头文件
#include<vector>
#include<set>

##### 具体实现
vector<int> all;
set<int> s;
for (int i : vec)
	s.insert(i);


总结：
方法一：使用sort和erase(unique())
优点：
原地去重：该方法在原始数组上进行操作，不需要额外的数据结构，节省内存。
简单易懂：这是一种标准的数组去重方法，很容易理解。
缺点：
需要排序：在进行去重之前，需要先对数组进行排序，这可能需要O(n*log(n))的时间复杂度。
修改原始数据：这种方法会修改原始数组，如果你需要保留原始数据，就需要备份一份，这可能会占用额外的内存。
方法二：使用std::set
优点：
自动去重：std::set是一个基于红黑树的有序容器，它会自动去重，不需要额外的去重步骤。
无需排序：由于std::set是有序的，不需要事先对数组进行排序，所以在某些情况下，它的性能可能更好。
缺点：
需要额外的内存：std::set需要额外的内存来存储去重后的数据，这可能会占用较多的内存，尤其是当原始数组很大时。
不保留原始顺序：std::set会自动对元素进行排序，所以如果你需要保留原始数组的顺序，这个方法可能不适用。
根据你的具体需求，选择合适的方法。如果内存消耗不是问题，而且你需要自动去重并且不关心原始顺序，那么方法二使用std::set可能更合适。如果内存有限，或者你需要保留原始数组的顺序，那么方法一可能更适合。
